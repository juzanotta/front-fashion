// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Cliente {
  id             String       @db.VarChar(36) @id @default(uuid())
  nome           String       @db.VarChar(30)
  email          String       @db.VarChar(100) @unique()
  senha          String       @db.VarChar(40)
  cidade         String       @db.VarChar(40)
  telefone       String       @db.VarChar(15)
  endereco       String?      @db.VarChar(50)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  vendas         Venda[]
  logs           Log[]
  @@map("clientes")
}

model Vendedor {
  id             Int          @id @default(autoincrement())
  nome           String       @db.VarChar(30)
  email          String       @db.VarChar(100) @unique()
  senha          String       @db.VarChar(40)
  telefone       String       @db.VarChar(15)
  cidade         String       @db.VarChar(40)
  endereco       String?      @db.VarChar(50)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  produtos       Produto[]
  vendas         Venda[]
  logs           Log[]
  @@map("vendedores")
}

model Produto {
  id             Int          @id @default(autoincrement())
  cor            String       @db.VarChar(20)
  marca          String?      @db.VarChar(20)
  material       String?      @db.VarChar(20)
  valor          Decimal      @db.Decimal(10, 2)
  foto           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  favorito       Boolean      @default(false)
  tamanho        Tamanhos     @default(M)
  tipo           Tipos        @default(BLUSA)
  quantidade     Int          @db.SmallInt  
  vendedor       Vendedor     @relation(fields: [vendedorId], references: [id])
  vendedorId     Int
  vendas         Venda[]
  @@map("produtos")
}

enum Tamanhos {
  PP
  P
  M
  G
  GG
  G1
}

enum Tipos {
  CALCA
  BLUSA
  ACESSORIO
  SAIA
  VESTIDO
  BOLSA
  CALCADO
}

model Venda {
  id             Int          @id @default(autoincrement())
  valor          Decimal      @db.Decimal(10,2)
  quantidade     Int          @db.SmallInt
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  cliente        Cliente      @relation(fields: [clienteId], references: [id])
  clienteId      String
  produto        Produto      @relation(fields: [produtoId], references: [id])
  produtoId      Int
  vendedor       Vendedor     @relation(fields: [vendedorId], references: [id])
  vendedorId     Int
  pagamento      Pagamentos
  @@map("vendas")
}

enum Pagamentos {
  PIX
  DEBITO
  CREDITO
}

model Log {
  id            Int         @id @default(autoincrement())
  descricao     String      @db.VarChar(60)
  complemento   String      @db.VarChar(200)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cliente       Cliente     @relation(fields: [clienteId], references: [id])
  clienteId     String
  vendedor      Vendedor    @relation(fields: [vendedorId], references: [id])
  vendedorId    Int
  @@map("logs")
}